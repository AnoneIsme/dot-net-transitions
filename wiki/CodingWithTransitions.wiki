*(Page not yet complete.)*

===Contents===
  * [CodingWithTransitions#Adding_the_Transitions_library_to_your_project Adding the Transitions library to your project.]
  * [CodingWithTransitions#Creating_a_transition_that_works_o_multiple_properties Creating a transition that works on multiple properties.]
  * [CodingWithTransitions#Creating_a_transition_that_works_on_a_single_property Creating a transition that works on a single property.]
  * [CodingWithTransitions#Creating_chained_transitions Creating chained transitions.]
  * [CodingWithTransitions#Using_the_TransitionCompletedEvent Using the TransitionCompletedEvent.]
  * [CodingWithTransitions#Using_the_predefined_transition-types Using the predefined transition-types.]
  * [CodingWithTransitions#Using_the_user-defined_transition-type Using the user-defined transition-type.]
  * [CodingWithTransitions#Creating_your_own_transition-type Creating your own transition-type.]
  * [CodingWithTransitions#Property_types_supported_by_the_Transitions_library Property types supported by the Transitions library.]

===Adding the Transitions library to your project===
To add Transitions to your project you just need to add a reference to the Transitions.dll. This dll can be found in the !TransitionsSample and !TransitionsLibrary downloads.


===Creating a transition that works on multiple properties===
You create a transition in three stages:
1. Create a new Transition object.
2. Add the properties to it that you want to animate.
3. Run the transition.

Here's an example:
{{{
Transition t = new Transition(new TransitionType_EaseInEaseOut(2000));
t.add(pictureBox1, "Left", 0);
t.add(pictureBox2, "Left", -300);
t.run();
}}}

When you create the transition you specify which transition-type you will be using and any parameters needed by it - in particular the time that the transition will take, expressed in milliseconds. The transition-type defines which 'animation-curve' will be used. See [CodingWithTransitions#Using_the_predefined_transition-types below] for more details about the different transition types.

After creating the transition, you tell it which properties you want to animate. As in the example above, these can be properties on more than one object. Equally, you could animate multiple properties on the same object. You specify the object, the name of the property and the destination value.

When you run the transition, the Transitions library will animate the specified properties from their current values to the specified destination values using the transition-type you specified. The animation is done asynchronously on a background thread, so your main thread of code carries on running immediately after the run() method is called.


===Creating a transition that works on a single property===
The Transitions class has a static run() method that lets you animate a single property. You call it like this:
{{{
Transition.run(this, "BackColor", Color.Red, new TransitionType_Linear(1000));
}}}

This is just a convenient shorthand for:
{{{
Transition t = new Transition(new TransitionType_Linear(1000));
t.add(this, "BackColor", Color.Red);
t.run();
}}}


===Creating chained transitions===


===Using the TransitionCompletedEvent===


===Using the predefined transition-types===


===Using the user-defined transition-type===


===Creating your own transition-type===


===Property types supported by the Transitions library===